name: CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Setup for pnpm
        uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.20.3

      - name: Use Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: Run tests and collect coverage
        run: pnpm test:cov

      - name: Run integration tests and collect coverage
        run: pnpm test:e2e --coverage

      - name: build
        run: pnpm build

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests

  deploy:
    name: Publish to ECR
    runs-on: ubuntu-latest
    needs: [build]
    if: contains(github.ref, 'refs/heads/develop') || contains(github.ref, 'refs/heads/master') || contains(github.ref, 'refs/heads/release')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Prepare environment variables
        run: |
          if [ "master" == "${GITHUB_REF_NAME}" ]; then
            for env_value in $(compgen -v |grep '.*_PRODUCTION$'); do
              eval export ${env_value%_PRODUCTION}="${!env_value}"
            done
            export ENVIRONMENT="production"
          else
            for env_value in $(compgen -v |grep '.*_DEVELOPMENT$'); do
              eval export ${env_value%_DEVELOPMENT}="${!env_value}"
            done
            export ENVIRONMENT="development"
          fi
          tag_build_num="v${GITHUB_RUN_ID}-build"
          export CI_REGISTRY="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          export IMAGE="${CI_REGISTRY}/${AWS_ECR_NAME}:$tag_build_num"
          export IMAGE_LATEST="${CI_REGISTRY}/${AWS_ECR_NAME}:latest"
          export IMAGE_INSTALLER=installer
          export IMAGE_TEST=test

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push image to Amazon ECR
        run: docker push "$IMAGE" && docker push "$IMAGE_LATEST"

      - name: Push Swagger definition to s3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --delete
        env:
          SOURCE_DIR: 's3_swagger'
          DEST_DIR: ${{ github.repository }}/${{ github.ref_name }}

  auto-merge:
    needs: [build]
    if: contains(github.event.pull_request.user.login, 'dependabot') || contains(github.event.pull_request.user.login, 'renovate')
    runs-on: ubuntu-latest
    steps:
      - name: automerge
        uses: 'pascalgn/automerge-action@v0.14.3'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          MERGE_LABELS: ''
          MERGE_METHOD: rebase
