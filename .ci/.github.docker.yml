name: CI

on: [push, pull_request]

jobs:
  build:
    name: Test and build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Prepare environment variables
        run: |
          if [ "master" == "${GITHUB_REF_NAME}" ]; then
            for env_value in $(compgen -v |grep '.*_PRODUCTION$'); do
              eval export ${env_value%_PRODUCTION}="${!env_value}"
            done
            export ENVIRONMENT="production"
          else
            for env_value in $(compgen -v |grep '.*_DEVELOPMENT$'); do
              eval export ${env_value%_DEVELOPMENT}="${!env_value}"
            done
            export ENVIRONMENT="development"
          fi
          tag_build_num="v${GITHUB_RUN_ID}-build"
          export CI_REGISTRY="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          export IMAGE="${CI_REGISTRY}/${AWS_ECR_NAME}:$tag_build_num"
          export IMAGE_LATEST="${CI_REGISTRY}/${AWS_ECR_NAME}:latest"
          export IMAGE_INSTALLER=installer
          export IMAGE_TEST=test
      - name: Build infra for testing
        run: docker-compose -f docker-compose.infra.yml up -d
      - name: Build test image
        run: docker-compose -f docker-compose.ci.yml build app-test
      - name: Run the test
        run: docker-compose -f docker-compose.ci.yml run  -v "$PWD/coverage:/srv/coverage" app-test
      - name: Build swagger generator image
        run: docker-compose -f docker-compose.ci.yml build swagger-gen
      - name: Generate swagger definition
        run: docker-compose -f docker-compose.ci.yml run  -v "$PWD/s3_swagger:/s3_swagger" swagger-gen
      - name: Build the runtime image
        run: docker build -f .docker/Dockerfile -t "${IMAGE}" -t "${IMAGE_LATEST}" --build-arg COMMIT_HASH=${GITHUB_SHA} --build-arg PIPELINE_ID=${GITHUB_RUN_ID} .
      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: tests

  deploy:
    name: Publish to ECR
    runs-on: ubuntu-latest
    needs: [build]
    if: contains(github.ref, 'refs/heads/develop') || contains(github.ref, 'refs/heads/master') || contains(github.ref, 'refs/heads/release')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Prepare environment variables
        run: |
          if [ "master" == "${GITHUB_REF_NAME}" ]; then
            for env_value in $(compgen -v |grep '.*_PRODUCTION$'); do
              eval export ${env_value%_PRODUCTION}="${!env_value}"
            done
            export ENVIRONMENT="production"
          else
            for env_value in $(compgen -v |grep '.*_DEVELOPMENT$'); do
              eval export ${env_value%_DEVELOPMENT}="${!env_value}"
            done
            export ENVIRONMENT="development"
          fi
          tag_build_num="v${GITHUB_RUN_ID}-build"
          export CI_REGISTRY="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          export IMAGE="${CI_REGISTRY}/${AWS_ECR_NAME}:$tag_build_num"
          export IMAGE_LATEST="${CI_REGISTRY}/${AWS_ECR_NAME}:latest"
          export IMAGE_INSTALLER=installer
          export IMAGE_TEST=test

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push image to Amazon ECR
        run: docker push "$IMAGE" && docker push "$IMAGE_LATEST"

      - name: Push Swagger definition to s3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --delete
        env:
          SOURCE_DIR: 's3_swagger'
          DEST_DIR: ${{ github.repository }}/${{ github.ref_name }}

  auto-merge:
    needs: test
    if: contains(github.event.pull_request.user.login, 'dependabot') || contains(github.event.pull_request.user.login, 'renovate')
    runs-on: ubuntu-latest
    steps:
      - name: automerge
        uses: 'pascalgn/automerge-action@v0.14.3'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          MERGE_LABELS: ''
          MERGE_METHOD: rebase
